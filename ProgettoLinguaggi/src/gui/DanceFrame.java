/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import media.MP3;
import media.Video;
import moveset.AbstractStep;
import moveset.Steady;
import wiiusej.WiiUseApiManager;
import wiiusej.Wiimote;
import wiiusej.values.Orientation;
import wiiusej.values.RawAcceleration;
import wiiusej.wiiusejevents.physicalevents.ExpansionEvent;
import wiiusej.wiiusejevents.physicalevents.IREvent;
import wiiusej.wiiusejevents.physicalevents.MotionSensingEvent;
import wiiusej.wiiusejevents.physicalevents.WiimoteButtonsEvent;
import wiiusej.wiiusejevents.utils.WiimoteListener;
import wiiusej.wiiusejevents.wiiuseapievents.ClassicControllerInsertedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.ClassicControllerRemovedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.DisconnectionEvent;
import wiiusej.wiiusejevents.wiiuseapievents.GuitarHeroInsertedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.GuitarHeroRemovedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.NunchukInsertedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.NunchukRemovedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.StatusEvent;

/**
 *
 * @author mwimola
 */
public class DanceFrame extends javax.swing.JFrame {

    /**
     * Creates new form DanceFrame
     */
    public DanceFrame() {
        initComponents();

        //_mp3 = new MP3("C:/Temp/Wannabe.mp3");
        //_video = new Video("C:\\Temp\\Wannabe.mp4", getCanvas());
        time = 0;
        label_pictogram.setIcon(new ImageIcon("C:/Temp/Pittogrammi/free.png"));
        orientation_list = new ArrayList<>();
        acceleration_list = new ArrayList<>();
        //sequence = new ArrayList<>();
        //for (int i = 0; i < 20; i++) {
        //    sequence.add(new Steady(1, "forward", 100));
        //    sequence.add(new Steady(1, "right", 100));
        //}
        //span = sequence.get(0).getSpan(); <--quando passo coreografia!!
        current_move = 0;
        points = 0;
        total_points = 0;

        if (!initWiiMotes()) {
            label_info.setText("No WiiMotes found. Sync a WiiMote to play");
            menu_sync.setEnabled(true);
        }
        else
        {
            label_info.setText("Press A to dance!");
            menu_sync.setEnabled(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas_video = new java.awt.Canvas();
        label_info = new javax.swing.JLabel();
        panel_pictogram = new javax.swing.JPanel();
        label_pictogram = new javax.swing.JLabel();
        label_time = new javax.swing.JLabel();
        label_pointslabel = new javax.swing.JLabel();
        label_pointsvalue = new javax.swing.JLabel();
        label_res = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        menu_sync = new javax.swing.JMenu();
        menuitem_remote = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_info.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_info.setText("Press A to Dance!");

        label_pictogram.setIcon(new javax.swing.ImageIcon("C:\\Temp\\Pittogrammi\\steady down.png")); // NOI18N

        label_time.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_time.setText("0:00");

        label_pointslabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_pointslabel.setForeground(new java.awt.Color(204, 0, 0));
        label_pointslabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_pointslabel.setText("SCORE");

        label_pointsvalue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_pointsvalue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_pointsvalue.setText("0");

        label_res.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_res.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panel_pictogramLayout = new javax.swing.GroupLayout(panel_pictogram);
        panel_pictogram.setLayout(panel_pictogramLayout);
        panel_pictogramLayout.setHorizontalGroup(
            panel_pictogramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_pictogram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(label_time, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(label_pointslabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(label_pointsvalue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(label_res, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_pictogramLayout.setVerticalGroup(
            panel_pictogramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_pictogramLayout.createSequentialGroup()
                .addComponent(label_pictogram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_time, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(label_pointslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_pointsvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_res, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menu_sync.setText("Sync");

        menuitem_remote.setText("Remote 1");
        menuitem_remote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitem_remoteActionPerformed(evt);
            }
        });
        menu_sync.add(menuitem_remote);

        jMenuBar.add(menu_sync);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_info, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(canvas_video, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_pictogram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(label_info)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(canvas_video, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(panel_pictogram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuitem_remoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitem_remoteActionPerformed
        if (!initWiiMotes()) {
            label_info.setText("No WiiMotes found. Sync a WiiMote to play");
        } else {
            label_info.setText("Press A to dance!");
        }
    }//GEN-LAST:event_menuitem_remoteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DanceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DanceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DanceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DanceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DanceFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas_video;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JLabel label_info;
    private javax.swing.JLabel label_pictogram;
    private javax.swing.JLabel label_pointslabel;
    private javax.swing.JLabel label_pointsvalue;
    private javax.swing.JLabel label_res;
    private javax.swing.JLabel label_time;
    private javax.swing.JMenu menu_sync;
    private javax.swing.JMenuItem menuitem_remote;
    private javax.swing.JPanel panel_pictogram;
    // End of variables declaration//GEN-END:variables
    private Video _video;
    private MP3 _mp3;
    private int time;
    private int total_points;
    private ScheduledExecutorService scheduler;
    private ArrayList<AbstractStep> sequence;
    private int current_move;
    private int span;
    private int points;
    private String result;
    private ArrayList<Orientation> orientation_list;
    private ArrayList<RawAcceleration> acceleration_list;

    public java.awt.Canvas getCanvas() {
        return canvas_video;
    }

    private boolean initWiiMotes() {
        Wiimote[] wiimotes = WiiUseApiManager.getWiimotes(1, true);
        if (wiimotes != null && wiimotes.length > 0) {
            Wiimote wiimote = wiimotes[0];
            wiimote.activateMotionSensing();
            wiimote.addWiiMoteEventListeners(new DanceListener());
            return true;
        } else {
            return false;
        }

    }

    private class DanceListener implements WiimoteListener {

        @Override
        public void onButtonsEvent(WiimoteButtonsEvent wbe) {

            if (wbe.isButtonAJustPressed()) {
                label_info.setText("Dance!");

                _video.play();
                _mp3.play();

                scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.scheduleAtFixedRate(new updateTime(), 1, 1, TimeUnit.SECONDS);
                //scheduler.scheduleAtFixedRate(new showNextMove(), 0, 1, TimeUnit.SECONDS);
                scheduler.scheduleAtFixedRate(new showNextMove(), 900, 1000, TimeUnit.MILLISECONDS);

            } else if (wbe.isButtonBJustPressed()) {
                _mp3.close();
                _video.stop();
                label_info.setText("Press A to Dance!");
                label_pictogram.setIcon(new ImageIcon("C:/Temp/Pittogrammi/free.png"));
                scheduler.shutdown();
                time = 0;
                label_time.setText("00:00");
                current_move = 0;
                span = sequence.get(0).getSpan();
                total_points = 0;
                label_pointsvalue.setText("0");
                label_res.setText("");
            } else if (wbe.isButtonHomeJustPressed()) {
                System.exit(0);
            }

        }

        @Override
        public void onMotionSensingEvent(MotionSensingEvent mse) {

            orientation_list.add(mse.getOrientation());
            acceleration_list.add(mse.getRawAcceleration());

            //System.out.println(mse.getOrientation());
            //System.out.println(mse.getRawAcceleration().getX());
        }

        @Override
        public void onExpansionEvent(ExpansionEvent ee) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onStatusEvent(StatusEvent se) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onDisconnectionEvent(DisconnectionEvent de) {
            menu_sync.setEnabled(true);
            label_info.setText("No WiiMotes found. Sync a WiiMote to play");
        }

        @Override
        public void onIrEvent(IREvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onNunchukInsertedEvent(NunchukInsertedEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onNunchukRemovedEvent(NunchukRemovedEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onGuitarHeroInsertedEvent(GuitarHeroInsertedEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onGuitarHeroRemovedEvent(GuitarHeroRemovedEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onClassicControllerInsertedEvent(ClassicControllerInsertedEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onClassicControllerRemovedEvent(ClassicControllerRemovedEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }

    private class updateTime implements Runnable {

        @Override
        public void run() {
            if (current_move < sequence.size()) {
                time++;
                int seconds = time % 60;
                int minutes = time / 60;
                String sec = (seconds > 9 ? seconds + "" : "0" + seconds);
                String min = (minutes > 9 ? minutes + "" : "0" + minutes);
                label_time.setText(min + ":" + sec);

                span--;
                if (span == 0) {

                    result = sequence.get(current_move).evaluate(orientation_list, acceleration_list);
                    points = sequence.get(current_move).getPoints();
                    new updatePoints().run();
                    orientation_list.clear();
                    acceleration_list.clear();
                    current_move++;
                    if (current_move < sequence.size()) {
                        span = sequence.get(current_move).getSpan();
                    }
                }
            } else {
                label_info.setText("Done! Press B to start again or Home to close");
            }
        }
    }

    private class showNextMove implements Runnable {

        @Override
        public void run() {
            label_pictogram.setIcon(sequence.get(current_move).getIcon());
        }

    }

    private class updatePoints implements Runnable {

        @Override
        public void run() {
            if (result.equals(AbstractStep.RES_OK)) {
                total_points = total_points + points;
                label_pointsvalue.setText(total_points + "");
                label_res.setForeground(Color.GREEN);
                label_res.setText(result);
            } else if (result.equals(AbstractStep.RES_X)) {
                label_res.setForeground(Color.RED);
                label_res.setText(result);
            } else {
                label_res.setText(result);
            }
        }

    }

    public void setSequence(ArrayList<AbstractStep> list) {
        this.sequence = list;
        span = sequence.get(0).getSpan();
    }

    public void setMedia(String path_audio, String path_video) {
        _mp3 = new MP3(path_audio);
        _video = new Video(path_video.replace("/", "\\"), getCanvas());
    }
}
