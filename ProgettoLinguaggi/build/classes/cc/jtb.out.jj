/* Generated by JTB 1.4.7 */


options
{
  JDK_VERSION = "1.5";
  static = true;
  // JTB_P = "cc";
}

PARSER_BEGIN(MyParser)
package cc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import cc.syntaxtree.*;


public class MyParser {

  public static void main(String args[]) throws ParseException, FileNotFoundException{
    MyParser parser = new MyParser(new FileInputStream("C:/Temp/Prova.txt"));
    try {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression :");
      parser.Scope();
      System.out.println("OK!");
    }
    catch (Exception e) {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
    }
    catch (Error e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MyParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < TITLE : "title" >
| < COREOGRAPHY : "coreography" >
| < ARTIST : "artist" >
| < AUDIO : "audio" >
| < VIDEO : "video" >
| < DEFINE : "define" >
| < TIMES : "times" >
| < POINTS : "points" >
| < SPAN : "span" >
| < REPEAT : "repeat" >
| < DO : "do" >
| < ONITERATION : "on iteration" >
| < DIR : "left"| "right"| "up"| "down"| "forward" >
| < SWING : "swing" >
| < TO : "to" >
| < FIST : "fist" >
| < STEADY : "steady" >
| < SHAKE : "shake" >
| < FREE : "free" >
| < COLON : ":" >
| < SEMICOLON : ";" >
| < O_BR : "{" >
| < C_BR : "}" >
}

TOKEN :
{
  < ID : <LETTER> ( <LETTER>| <NUM> )* >
| < CHARSEQ : "\"" ( <LETTER>| " "| <NUM>| <SYMBOL> )+ "\"" >
| < NUM : "0"| ["1"-"9"] ( ["0"-"9"] )* >
| < LETTER : ["A"-"Z"]| ["a"-"z"] >
| < SYMBOL : "_"| "."| "/"| ":"| "-" >
}

Scope Scope() :
{
  // --- JTB generated node declarations ---
  Title n0 = null;
  Artist n1 = null;
  Audio n2 = null;
  Video n3 = null;
  Body n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n0 = Title()
  n1 = Artist()
  n2 = Audio()
  n3 = Video()
  n4 = Body()
  n6 = < EOF >
  {
    n6.beginColumn++;
    n6.endColumn++;
    { n5 = JTBToolkit.makeNodeToken(n6); }
  }
  { return new Scope(n0, n1, n2, n3, n4, n5); }
}

Title Title() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < TITLE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < CHARSEQ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < SEMICOLON >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new Title(n0, n2, n4, n6); }
}

Artist Artist() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < ARTIST >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < CHARSEQ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < SEMICOLON >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new Artist(n0, n2, n4, n6); }
}

Audio Audio() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < AUDIO >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < CHARSEQ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < SEMICOLON >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new Audio(n0, n2, n4, n6); }
}

Video Video() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < VIDEO >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < CHARSEQ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < SEMICOLON >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new Video(n0, n2, n4, n6); }
}

Body Body() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  Statement n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < COREOGRAPHY >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < O_BR >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = Statement()
    { n6.addNode(n7); }
  )*
  { n6.nodes.trimToSize(); }
  n9 = < C_BR >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Body(n0, n2, n4, n6, n8); }
}

Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Instruction n1 = null;
  Definition n2 = null;
}
{
  (
    n1 = Instruction()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = Definition()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Statement(n0); }
}

Definition Definition() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Move n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < DEFINE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ID >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Move()
  n6 = < SEMICOLON >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new Definition(n0, n2, n4, n5); }
}

Instruction Instruction() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  SingleStep n1 = null;
  Cycle n2 = null;
}
{
  (
    n1 = SingleStep()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = Cycle()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Instruction(n0); }
}

SingleStep SingleStep() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  Move n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < DO >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n3 = Move()
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n5 = < ID >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n2 = new NodeChoice(n4, 1, 2); }
    )
    
  )
  n7 = < SEMICOLON >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new SingleStep(n0, n2, n6); }
}

Move Move() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  LongMove n1 = null;
  ShortMove n2 = null;
}
{
  (
    n1 = LongMove()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = ShortMove()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Move(n0); }
}

LongMove LongMove() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  LongMoveInfo n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  SpanExp n5 = null;
}
{
  (
    (
      n1 = LongMoveInfo()
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n3 = < FREE >
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n0 = new NodeChoice(n2, 1, 2); }
    )
    
  )
  (
    n5 = SpanExp()
    { n4.addNode(n5); }
  )?
  { return new LongMove(n0, n4); }
}

LongMoveInfo LongMoveInfo() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Details n10 = null;
}
{
  (
    (
      { n1 = new NodeSequence(3); }
      n3 = < SWING >
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5 = < DIR >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7 = < TO >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n9 = < STEADY >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 1, 2); }
    )
    
  )
  n10 = Details()
  { return new LongMoveInfo(n0, n10); }
}

ShortMove ShortMove() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Details n5 = null;
}
{
  (
    (
      n2 = < FIST >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < SHAKE >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  n5 = Details()
  { return new ShortMove(n0, n5); }
}

Details Details() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  PointsExp n3 = null;
}
{
  n1 = < DIR >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = PointsExp()
    { n2.addNode(n3); }
  )?
  { return new Details(n0, n2); }
}

Cycle Cycle() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeList n8 = new NodeList();
  NodeChoice n9 = null;
  Statement n10 = null;
  OnIteration n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = < REPEAT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < NUM >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < TIMES >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < O_BR >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  (
    (
      n10 = Statement()
      { n9 = new NodeChoice(n10, 0, 2); }
    |
      n11 = OnIteration()
      { n9 = new NodeChoice(n11, 1, 2); }
    )
    { n8.addNode(n9); }
  )+
  { n8.nodes.trimToSize(); }
  n13 = < C_BR >
  { n12 = JTBToolkit.makeNodeToken(n13); }
  { return new Cycle(n0, n2, n4, n6, n8, n12); }
}

OnIteration OnIteration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  OnIterationElement n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < ONITERATION >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < O_BR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    n5 = OnIterationElement()
    { n4.addNode(n5); }
  )+
  { n4.nodes.trimToSize(); }
  n7 = < C_BR >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new OnIteration(n0, n2, n4, n6); }
}

OnIterationElement OnIterationElement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  Move n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < NUM >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n5 = Move()
      { n4 = new NodeChoice(n5, 0, 2); }
    |
      n7 = < ID >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n4 = new NodeChoice(n6, 1, 2); }
    )
    
  )
  n9 = < SEMICOLON >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new OnIterationElement(n0, n2, n4, n8); }
}

PointsExp PointsExp() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < POINTS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < NUM >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new PointsExp(n0, n2, n4); }
}

SpanExp SpanExp() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < SPAN >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < COLON >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < NUM >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new SpanExp(n0, n2, n4); }
}
